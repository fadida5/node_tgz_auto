Updating node module civil to army script

npm i path/node-tgz-downloade (outside of your main folder- this package is == to nodemon in terms of hierarchy)
the script needs to do:
cd to backend (although in army we can just npm I the server side because most of its modules are in the nexus) in backend run download-tgz package-json package.json (to extract all the node modules [or we will use the nexus them script that runs on all of the node modules {need to be farther examined }])
mkdir a new file call backup with all the army node modules as tgz files from said script\command.
Clear package.json dependencies except react-scripts,webpack (need to find solution for that)
The script then run my current script that installing all relevant packages as tgz files (locally)
•	Important – the original script deleting node modules so before proceeding make sure you have a backup of your node modules as node modules and not as tgz (just to be safe)
From here there are 2 options need to check both
1)	Move backup into node modules to get all the modules you are missing (don’t replace any file except the following – wepack,browserslist) (if you are getting errors such as eslint-….. not found, try to upload it to the nexus [the password and the username will be saved in the script {the script will call nexus team upload script for said specific package}])


2)	Filter backup from the new modules that you just installed and the script will run my original script without the filter, by doing so you will get a lot, a massive amount of dependencies in your packge.json (it might remind you of your packge-lock.json in civil [yes it will be that massive])


•	Important – all the tgz files that you want to install need to be saved inside a folder named tarballs that will be inside your wanted level of node modules. Example – you want to update backend node modules, be inside backend and run the script, same goes for frontend.

The script will need- 
1)	array of modules you want to update (I will think of a better way to represent that[maybe as a txt file or a json file])
2)	whited tgz files of said modules.
3)	A working project with working node modules.
4)	A if you are not experienced with this script, a person that is to be with you (noa/dor/niv [for the time being])
TODO:

•	Will be updated to docker computable when needed,
•	Will have no check option for running without a person near it (this option might include making a copy before starting)
•	Need to check if I can make the default node modules a module to make life easier,
•	Error handling (check if a common error has appeared and have a premade fix for that, for example, npx browserlist@latest –db…  , ect)
•	The script will have “npm run build”  as one of its test, so you won’t have to exist the script unless you finished or the error is not a common error,
